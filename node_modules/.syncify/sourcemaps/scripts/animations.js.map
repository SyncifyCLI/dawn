{
  "version": 3,
  "sources": ["../../source/assets/scripts/animations.js"],
  "sourcesContent": ["const SCROLL_ANIMATION_TRIGGER_CLASSNAME = 'scroll-trigger';\nconst SCROLL_ANIMATION_OFFSCREEN_CLASSNAME = 'scroll-trigger--offscreen';\nconst SCROLL_ZOOM_IN_TRIGGER_CLASSNAME = 'animate--zoom-in';\nconst SCROLL_ANIMATION_CANCEL_CLASSNAME = 'scroll-trigger--cancel';\n\n// Scroll in animation logic\nfunction onIntersection(elements, observer) {\n  elements.forEach((element, index) => {\n    if (element.isIntersecting) {\n      const elementTarget = element.target;\n      if (elementTarget.classList.contains(SCROLL_ANIMATION_OFFSCREEN_CLASSNAME)) {\n        elementTarget.classList.remove(SCROLL_ANIMATION_OFFSCREEN_CLASSNAME);\n        if (elementTarget.hasAttribute('data-cascade'))\n          elementTarget.setAttribute('style', `--animation-order: ${index};`);\n      }\n      observer.unobserve(elementTarget);\n    } else {\n      element.target.classList.add(SCROLL_ANIMATION_OFFSCREEN_CLASSNAME);\n      element.target.classList.remove(SCROLL_ANIMATION_CANCEL_CLASSNAME);\n    }\n  });\n}\n\nfunction initializeScrollAnimationTrigger(rootEl = document, isDesignModeEvent = false) {\n  const animationTriggerElements = Array.from(rootEl.getElementsByClassName(SCROLL_ANIMATION_TRIGGER_CLASSNAME));\n  if (animationTriggerElements.length === 0) return;\n\n  if (isDesignModeEvent) {\n    animationTriggerElements.forEach((element) => {\n      element.classList.add('scroll-trigger--design-mode');\n    });\n    return;\n  }\n\n  const observer = new IntersectionObserver(onIntersection, {\n    rootMargin: '0px 0px -50px 0px',\n  });\n  animationTriggerElements.forEach((element) => observer.observe(element));\n}\n\n// Zoom in animation logic\nfunction initializeScrollZoomAnimationTrigger() {\n  if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;\n\n  const animationTriggerElements = Array.from(document.getElementsByClassName(SCROLL_ZOOM_IN_TRIGGER_CLASSNAME));\n\n  if (animationTriggerElements.length === 0) return;\n\n  const scaleAmount = 0.2 / 100;\n\n  animationTriggerElements.forEach((element) => {\n    let elementIsVisible = false;\n    const observer = new IntersectionObserver((elements) => {\n      elements.forEach((entry) => {\n        elementIsVisible = entry.isIntersecting;\n      });\n    });\n    observer.observe(element);\n\n    element.style.setProperty('--zoom-in-ratio', 1 + scaleAmount * percentageSeen(element));\n\n    window.addEventListener(\n      'scroll',\n      throttle(() => {\n        if (!elementIsVisible) return;\n\n        element.style.setProperty('--zoom-in-ratio', 1 + scaleAmount * percentageSeen(element));\n      }),\n      { passive: true }\n    );\n  });\n}\n\nfunction percentageSeen(element) {\n  const viewportHeight = window.innerHeight;\n  const scrollY = window.scrollY;\n  const elementPositionY = element.getBoundingClientRect().top + scrollY;\n  const elementHeight = element.offsetHeight;\n\n  if (elementPositionY > scrollY + viewportHeight) {\n    // If we haven't reached the image yet\n    return 0;\n  } else if (elementPositionY + elementHeight < scrollY) {\n    // If we've completely scrolled past the image\n    return 100;\n  }\n\n  // When the image is in the viewport\n  const distance = scrollY + viewportHeight - elementPositionY;\n  let percentage = distance / ((viewportHeight + elementHeight) / 100);\n  return Math.round(percentage);\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  initializeScrollAnimationTrigger();\n  initializeScrollZoomAnimationTrigger();\n});\n\nif (Shopify.designMode) {\n  document.addEventListener('shopify:section:load', (event) => initializeScrollAnimationTrigger(event.target, true));\n  document.addEventListener('shopify:section:reorder', () => initializeScrollAnimationTrigger(document, true));\n}\n"],
  "mappings": "AAAA,IAAMA,EAAqC,iBACrCC,EAAuC,4BACvCC,EAAmC,mBACnCC,EAAoC,yBAG1C,SAASC,EAAeC,EAAUC,EAAU,CAC1CD,EAAS,QAAQ,CAACE,EAASC,IAAU,CACnC,GAAID,EAAQ,eAAgB,CAC1B,IAAME,EAAgBF,EAAQ,OAC1BE,EAAc,UAAU,SAASR,CAAoC,IACvEQ,EAAc,UAAU,OAAOR,CAAoC,EAC/DQ,EAAc,aAAa,cAAc,GAC3CA,EAAc,aAAa,QAAS,sBAAsBD,CAAK,GAAG,GAEtEF,EAAS,UAAUG,CAAa,CAClC,MACEF,EAAQ,OAAO,UAAU,IAAIN,CAAoC,EACjEM,EAAQ,OAAO,UAAU,OAAOJ,CAAiC,CAErE,CAAC,CACH,CAEA,SAASO,EAAiCC,EAAS,SAAUC,EAAoB,GAAO,CACtF,IAAMC,EAA2B,MAAM,KAAKF,EAAO,uBAAuBX,CAAkC,CAAC,EAC7G,GAAIa,EAAyB,SAAW,EAAG,OAE3C,GAAID,EAAmB,CACrBC,EAAyB,QAASN,GAAY,CAC5CA,EAAQ,UAAU,IAAI,6BAA6B,CACrD,CAAC,EACD,MACF,CAEA,IAAMD,EAAW,IAAI,qBAAqBF,EAAgB,CACxD,WAAY,mBACd,CAAC,EACDS,EAAyB,QAASN,GAAYD,EAAS,QAAQC,CAAO,CAAC,CACzE,CAGA,SAASO,GAAuC,CAC9C,GAAI,OAAO,WAAW,kCAAkC,EAAE,QAAS,OAEnE,IAAMD,EAA2B,MAAM,KAAK,SAAS,uBAAuBX,CAAgC,CAAC,EAE7G,GAAIW,EAAyB,SAAW,EAAG,OAE3C,IAAME,EAAc,GAAM,IAE1BF,EAAyB,QAASN,GAAY,CAC5C,IAAIS,EAAmB,GACN,IAAI,qBAAsBX,GAAa,CACtDA,EAAS,QAASY,GAAU,CAC1BD,EAAmBC,EAAM,cAC3B,CAAC,CACH,CAAC,EACQ,QAAQV,CAAO,EAExBA,EAAQ,MAAM,YAAY,kBAAmB,EAAIQ,EAAcG,EAAeX,CAAO,CAAC,EAEtF,OAAO,iBACL,SACA,SAAS,IAAM,CACRS,GAELT,EAAQ,MAAM,YAAY,kBAAmB,EAAIQ,EAAcG,EAAeX,CAAO,CAAC,CACxF,CAAC,EACD,CAAE,QAAS,EAAK,CAClB,CACF,CAAC,CACH,CAEA,SAASW,EAAeX,EAAS,CAC/B,IAAMY,EAAiB,OAAO,YACxBC,EAAU,OAAO,QACjBC,EAAmBd,EAAQ,sBAAsB,EAAE,IAAMa,EACzDE,EAAgBf,EAAQ,aAE9B,GAAIc,EAAmBD,EAAUD,EAE/B,MAAO,GACF,GAAIE,EAAmBC,EAAgBF,EAE5C,MAAO,KAKT,IAAIG,GADaH,EAAUD,EAAiBE,KACdF,EAAiBG,GAAiB,KAChE,OAAO,KAAK,MAAMC,CAAU,CAC9B,CAEA,OAAO,iBAAiB,mBAAoB,IAAM,CAChDb,EAAiC,EACjCI,EAAqC,CACvC,CAAC,EAEG,QAAQ,aACV,SAAS,iBAAiB,uBAAyBU,GAAUd,EAAiCc,EAAM,OAAQ,EAAI,CAAC,EACjH,SAAS,iBAAiB,0BAA2B,IAAMd,EAAiC,SAAU,EAAI,CAAC",
  "names": ["SCROLL_ANIMATION_TRIGGER_CLASSNAME", "SCROLL_ANIMATION_OFFSCREEN_CLASSNAME", "SCROLL_ZOOM_IN_TRIGGER_CLASSNAME", "SCROLL_ANIMATION_CANCEL_CLASSNAME", "onIntersection", "elements", "observer", "element", "index", "elementTarget", "initializeScrollAnimationTrigger", "rootEl", "isDesignModeEvent", "animationTriggerElements", "initializeScrollZoomAnimationTrigger", "scaleAmount", "elementIsVisible", "entry", "percentageSeen", "viewportHeight", "scrollY", "elementPositionY", "elementHeight", "percentage", "event"]
}
